(()=>{"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button-submit",inactiveButtonClass:"popup__button-submit_disabled",inputErrorClass:"popup__input_error",errorClass:"popup__error_visible"},t=document.querySelector(".user__name"),n=document.querySelector(".user__about"),r=document.querySelector(".user__avatar"),o=document.querySelector(".user__button-edit"),i=document.querySelector(".profile__button-add"),a=document.querySelector(".user__avatar-edit"),u=document.querySelector(".popup__input_data_name"),c=document.querySelector(".popup__input_data_about"),s=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=document.querySelector(e).querySelector(".popup__button-submit");n.textContent=t?"Сохранение ...":"Сохранить"};function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t,n,r){var o=t.data,i=t.handleCardClick,a=t.handleDeleteClick,u=t.handleLikeClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=o.title,this._link=o.link,this.likes=o.likes,this._cardTemplate=n,this.id=o.id,this._ownerID=o.owner,this._currentUserID=r,this._handleCardClick=i,this._handleDeleteClick=a,this._handleLikeClick=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardTemplate).content.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__button-like").addEventListener("click",(function(){e._handleLikeClick(e)}));var t=this._element.querySelector(".element__button-delete");t&&t.addEventListener("click",(function(){e._handleDeleteClick()})),this._img.addEventListener("click",(function(){e._handleCardClick(e._title,e._link)}))}},{key:"deleteCard",value:function(){this._element.remove(),this._element=""}},{key:"setLikes",value:function(e){var t=this,n=this._element.querySelector(".element__button-like"),r=this._element.querySelector(".element__likes-counter");this.likes=e.likes,r.textContent=this.likes.length,this.likes.some((function(e){return e._id==t._currentUserID}))?n.classList.add("element__button-like_active"):n.classList.remove("element__button-like_active")}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._img=this._element.querySelector(".element__img"),this._setEventListeners(),this._element.querySelector(".element__name").textContent=this._title,this._img.alt=this._title,this._img.src=this._link,this.setLikes(this),this._ownerID!=this._currentUserID&&this._element.querySelector(".element__button-delete").remove(),this._element}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=t,this._inputSelector=n.inputSelector,this._inputsArray=Array.from(this._form.querySelectorAll(this._inputSelector)),this._inputErrorClass=n.inputErrorClass,this._errorClass=n.errorClass,this._buttonElement=this._form.querySelector(n.submitButtonSelector),this._inactiveButtonClass=n.inactiveButtonClass}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setInputListeners()}},{key:"_setInputListeners",value:function(){var e=this;this._inputsArray.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"_checkInputValidity",value:function(e){this._inputElement=e,this._inputErrorPlace=document.getElementById("".concat(this._inputElement.name,"-error")),this._errorMessage=this._inputElement.validationMessage,this._inputElement.validity.valid?this._hideInputError():this._showInputError()}},{key:"_hideInputError",value:function(){this._inputElement.classList.remove(this._inputErrorClass),this._inputErrorPlace.classList.remove(this._errorClass)}},{key:"_showInputError",value:function(){this._inputElement.classList.add(this._inputErrorClass),this._inputErrorPlace.textContent=this._errorMessage,this._inputErrorPlace.classList.add(this._errorClass)}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.deactivateButton():this._activateButton()}},{key:"_hasInvalidInput",value:function(){return this._inputsArray.some((function(e){return!e.validity.valid}))}},{key:"deactivateButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}},{key:"_activateButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}},{key:"hideAllErrors",value:function(){var e=this;this._inputsArray.forEach((function(t){e._inputElement=t,e._inputErrorPlace=document.getElementById("".concat(t.name,"-error")),e._hideInputError()}))}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderAllItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.append(e)}}])&&d(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup__button-close")||t.target.classList.contains("popup"))&&e.close()}))}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},k.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}function w(e,t){return w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},w(e,t)}function E(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&w(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(r);if(o){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e,t){this._placeCardName=this._popup.querySelector(".popup__place-name"),this._placeCardImage=this._popup.querySelector(".popup__image"),this._placeCardName.textContent=e,this._placeCardImage.alt=e,this._placeCardImage.src=t,k(C(a.prototype),"open",this).call(this)}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(v);function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=P(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},j.apply(this,arguments)}function P(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}function I(e,t){return I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},I(e,t)}function A(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return T(e)}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleFormSubmit=t.bind(T(n)),n.form=n._popup.querySelector(".popup__form"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._popup.querySelectorAll(".popup__input"),this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;j(q(a.prototype),"setEventListeners",this).call(this),this.form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){j(q(a.prototype),"close",this).call(this),this.form.reset()}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(v);function U(e){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},U(e)}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=x(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},B.apply(this,arguments)}function x(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function H(e,t){if(t&&("object"===U(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return H(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._form=t._popup.querySelector(".popup__form"),t}return t=a,(n=[{key:"setSubmitAction",value:function(e){this._handleFormSubmit=e.bind(this)}},{key:"setEventListeners",value:function(){var e=this;B(V(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e.close(),e._handleFormSubmit()}))}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(v);function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var J=function(){function e(t){var n=t.userName,r=t.userAbout;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=n,this._userAbout=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._userName.textContent,userAbout:this._userAbout.textContent}}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userAbout.textContent=e.about}}])&&M(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_errorHandler",value:function(e){return e.ok?e.json():Promise.reject("Произошла ошибка при обращении к серверу, код ошибки: ".concat(e.status))}},{key:"getUserData",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{method:"GET",headers:this._headers}).then((function(t){return e._errorHandler(t)}))}},{key:"getAllCards",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{method:"GET",headers:this._headers}).then((function(t){return e._errorHandler(t)}))}},{key:"getStartedData",value:function(){return Promise.all([this.getUserData(),this.getAllCards()])}},{key:"patchUserData",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._errorHandler(e)}))}},{key:"patchUserAvatar",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._errorHandler(e)}))}},{key:"postCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})}).then((function(e){return t._errorHandler(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e.id,{method:"DELETE",headers:this._headers}).then((function(e){return t._errorHandler(e)}))}},{key:"putCardLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e.id+"/likes",{method:"PUT",headers:this._headers}).then((function(e){return t._errorHandler(e)}))}},{key:"deleteCardLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e.id+"/likes",{method:"DELETE",headers:this._headers}).then((function(e){return t._errorHandler(e)}))}}])&&G(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41",headers:{authorization:"1d4d3067-933d-44bd-90ee-5ffcfa07139c","Content-Type":"application/json"}});$.getStartedData().then((function(l){var p,d,y=(d=2,function(e){if(Array.isArray(e))return e}(p=l)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(p,d)||function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(p,d)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),v=y[0],m=y[1];t.textContent=v.name,n.textContent=v.about,r.src=v.avatar;var b=new J({userName:t,userAbout:n}),k=v._id,g=new R(".popup_action_profile-edit",(function(e){s(".popup_action_profile-edit",!0),$.patchUserData(e).then((function(e){s(".popup_action_profile-edit",!1),b.setUserInfo(e),g.close()})).catch((function(e){return console.log(e)}))})),w=new R(".popup_action_avatar-edit",(function(e){s(".popup_action_avatar-edit",!0),$.patchUserAvatar(e).then((function(e){s(".popup_action_avatar-edit",!0),r.src=e.avatar,w.close()})).catch((function(e){return console.log(e)}))})),E=new h(g.form,e),C=new h(w.form,e);E.enableValidation(),C.enableValidation(),g.setEventListeners(),w.setEventListeners(),o.addEventListener("click",(function(){u.value=b.getUserInfo().userName,c.value=b.getUserInfo().userAbout,E.deactivateButton(),E.hideAllErrors(),g.open()})),a.addEventListener("click",(function(){C.deactivateButton(),C.hideAllErrors(),w.open()}));var O=new _({items:m.map((function(e){return{title:e.name,link:e.link,likes:e.likes,id:e._id,owner:e.owner._id}})),renderer:A},".elements");O.renderAllItems();var L=new S(".popup_action_card-view"),j=new R(".popup_action_card-add",(function(e){s(".popup_action_card-add",!0),$.postCard(e).then((function(e){s(".popup_action_card-add",!0),A({title:e.name,link:e.link,likes:e.likes,id:e._id,owner:e.owner._id}),j.close()})).catch((function(e){return console.log(e)}))})),P=new F(".popup_action_card-delete"),I=new h(j.form,e);function A(e){var t=new f({data:e,handleCardClick:T,handleDeleteClick:function(){P.setSubmitAction((function(e){!function(e){$.deleteCard(e).then((function(t){e.deleteCard()})).catch((function(e){return console.log(e)}))}(t)})),P.open()},handleLikeClick:q},".card-template",k),n=t.generateCard();O.addItem(n)}function T(e,t){L.open(e,t)}function q(e){e.likes.some((function(e){return e._id==k}))?$.deleteCardLike(e).then((function(t){e.setLikes(t)})).catch((function(e){return console.log(e)})):$.putCardLike(e).then((function(t){e.setLikes(t)})).catch((function(e){return console.log(e)}))}I.enableValidation(),L.setEventListeners(),j.setEventListeners(),P.setEventListeners(),i.addEventListener("click",(function(){I.deactivateButton(),I.hideAllErrors(),j.open()}))})).catch((function(e){return console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,