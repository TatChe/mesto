(()=>{"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button-submit",inactiveButtonClass:"popup__button-submit_disabled",inputErrorClass:"popup__input_error",errorClass:"popup__error_visible"},t=document.querySelector(".user__name"),n=document.querySelector(".user__about"),r=document.querySelector(".user__avatar"),o=document.querySelector(".user__button-edit"),i=document.querySelector(".profile__button-add"),a=document.querySelector(".user__avatar-edit"),u=document.querySelector(".popup__input_data_name"),s=document.querySelector(".popup__input_data_about");function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){var o=t.data,i=t.handleCardClick,a=t.handleDeleteClick,u=t.handleLikeClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=o.title,this._link=o.link,this.likes=o.likes,this._cardTemplate=n,this.id=o.id,this._ownerID=o.owner,this._currentUserID=r,this._handleCardClick=i,this._handleDeleteClick=a,this._handleLikeClick=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardTemplate).content.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__button-like").addEventListener("click",(function(){e._handleLikeClick(e)}));var t=this._element.querySelector(".element__button-delete");t&&t.addEventListener("click",(function(){e._handleDeleteClick()})),this._img.addEventListener("click",(function(){e._handleCardClick(e._title,e._link)}))}},{key:"deleteCard",value:function(){this._element.remove(),this._element=null}},{key:"isLiked",value:function(){var e=this;return Boolean(this.likes.find((function(t){return t._id===e._currentUserID})))}},{key:"setLikes",value:function(e){var t=this._element.querySelector(".element__button-like"),n=this._element.querySelector(".element__likes-counter");this.likes=e.likes,n.textContent=this.likes.length,this.isLiked()?t.classList.add("element__button-like_active"):t.classList.remove("element__button-like_active")}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._img=this._element.querySelector(".element__img"),this._setEventListeners(),this._element.querySelector(".element__name").textContent=this._title,this._img.alt=this._title,this._img.src=this._link,this.setLikes(this),this._ownerID!=this._currentUserID&&this._element.querySelector(".element__button-delete").remove(),this._element}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=t,this._inputSelector=n.inputSelector,this._inputsArray=Array.from(this._form.querySelectorAll(this._inputSelector)),this._inputErrorClass=n.inputErrorClass,this._errorClass=n.errorClass,this._buttonElement=this._form.querySelector(n.submitButtonSelector),this._inactiveButtonClass=n.inactiveButtonClass}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setInputListeners()}},{key:"_setInputListeners",value:function(){var e=this;this._inputsArray.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"_checkInputValidity",value:function(e){this._inputElement=e,this._inputErrorPlace=document.getElementById("".concat(this._inputElement.name,"-error")),this._errorMessage=this._inputElement.validationMessage,this._inputElement.validity.valid?this._hideInputError():this._showInputError()}},{key:"_hideInputError",value:function(){this._inputElement.classList.remove(this._inputErrorClass),this._inputErrorPlace.classList.remove(this._errorClass)}},{key:"_showInputError",value:function(){this._inputElement.classList.add(this._inputErrorClass),this._inputErrorPlace.textContent=this._errorMessage,this._inputErrorPlace.classList.add(this._errorClass)}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.deactivateButton():this._activateButton()}},{key:"_hasInvalidInput",value:function(){return this._inputsArray.some((function(e){return!e.validity.valid}))}},{key:"deactivateButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}},{key:"_activateButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}},{key:"hideAllErrors",value:function(){var e=this;this._inputsArray.forEach((function(t){e._inputElement=t,e._inputErrorPlace=document.getElementById("".concat(t.name,"-error")),e._hideInputError()}))}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderAllItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup__button-close")||t.target.classList.contains("popup"))&&e.close()}))}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}function g(e,t){return g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},g(e,t)}function w(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e,t){this._placeCardName=this._popup.querySelector(".popup__place-name"),this._placeCardImage=this._popup.querySelector(".popup__image"),this._placeCardName.textContent=e,this._placeCardImage.alt=e,this._placeCardImage.src=t,b(E(a.prototype),"open",this).call(this)}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(_);function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=j(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},L.apply(this,arguments)}function j(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=U(e)););return e}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function A(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return I(e)}function I(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function U(e){return U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},U(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=U(r);if(o){var n=U(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleFormSubmit=t.bind(I(n)),n.form=n._popup.querySelector(".popup__form"),n}return t=a,n=[{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._popup.querySelectorAll(".popup__input"),this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;L(U(a.prototype),"setEventListeners",this).call(this),this.form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){L(U(a.prototype),"close",this).call(this),this.form.reset()}},{key:"renderLoading",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this._popup.querySelector(".popup__button-submit");t.textContent=e?"Сохранение ...":"Сохранить"}}],n&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(_);function q(e){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},q(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=B(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},D.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=H(e)););return e}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function N(e,t){if(t&&("object"===q(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function H(e){return H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},H(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&x(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=H(r);if(o){var n=H(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return N(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._form=t._popup.querySelector(".popup__form"),t}return t=a,(n=[{key:"setSubmitAction",value:function(e){this._handleFormSubmit=e.bind(this)}},{key:"setEventListeners",value:function(){var e=this;D(H(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e.close(),e._handleFormSubmit()}))}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(_);function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var M=function(){function e(t){var n=t.userName,r=t.userAbout,o=t.userAvatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=n,this._userAbout=r,this._userAvatar=o,this.userId=""}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._userName.textContent,userAbout:this._userAbout.textContent,userAvatar:this._userAvatar.src,userId:this.userId}}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userAbout.textContent=e.about,this.userId=e._id}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}}])&&F(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var z=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_errorHandler",value:function(e){return e.ok?e.json():Promise.reject("Произошла ошибка при обращении к серверу, код ошибки: ".concat(e.status))}},{key:"getUserData",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{method:"GET",headers:this._headers}).then((function(t){return e._errorHandler(t)}))}},{key:"getAllCards",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{method:"GET",headers:this._headers}).then((function(t){return e._errorHandler(t)}))}},{key:"getStartedData",value:function(){return Promise.all([this.getUserData(),this.getAllCards()])}},{key:"patchUserData",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._errorHandler(e)}))}},{key:"patchUserAvatar",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._errorHandler(e)}))}},{key:"postCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})}).then((function(e){return t._errorHandler(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e.id,{method:"DELETE",headers:this._headers}).then((function(e){return t._errorHandler(e)}))}},{key:"putCardLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e.id+"/likes",{method:"PUT",headers:this._headers}).then((function(e){return t._errorHandler(e)}))}},{key:"deleteCardLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e.id+"/likes",{method:"DELETE",headers:this._headers}).then((function(e){return t._errorHandler(e)}))}}])&&J(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41",headers:{authorization:"1d4d3067-933d-44bd-90ee-5ffcfa07139c","Content-Type":"application/json"}}),$=new M({userName:t,userAbout:n,userAvatar:r}),K=new d({renderer:re},".elements"),Q=new T(".popup_action_profile-edit",(function(e){Q.renderLoading(!0),z.patchUserData(e).then((function(e){$.setUserInfo(e),Q.close()})).catch((function(e){return console.log(e)})).finally((function(){return Q.renderLoading(!1)}))})),W=new T(".popup_action_avatar-edit",(function(e){W.renderLoading(!0),z.patchUserAvatar(e).then((function(e){$.setUserAvatar(e.avatar),W.close()})).catch((function(e){return console.log(e)})).finally((function(){return W.renderLoading(!1)}))})),X=new C(".popup_action_card-view"),Y=new T(".popup_action_card-add",(function(e){Y.renderLoading(!0),z.postCard(e).then((function(e){re({title:e.name,link:e.link,likes:e.likes,id:e._id,owner:e.owner._id}),Y.close()})).catch((function(e){return console.log(e)})).finally((function(){return Y.renderLoading(!1)}))})),Z=new V(".popup_action_card-delete"),ee=new p(Q.form,e),te=new p(W.form,e),ne=new p(Y.form,e);function re(e){var t=new l({data:e,handleCardClick:oe,handleDeleteClick:function(){Z.setSubmitAction((function(e){!function(e){z.deleteCard(e).then((function(t){e.deleteCard()})).catch((function(e){return console.log(e)}))}(t)})),Z.open()},handleLikeClick:ie},".card-template",$.userId),n=t.generateCard();K.addItem(n)}function oe(e,t){X.open(e,t)}function ie(e){e.isLiked()?z.deleteCardLike(e).then((function(t){e.setLikes(t)})).catch((function(e){return console.log(e)})):z.putCardLike(e).then((function(t){e.setLikes(t)})).catch((function(e){return console.log(e)}))}z.getStartedData().then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return G(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?G(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=r[0],l=r[1];$.setUserInfo(c),$.setUserAvatar(c.avatar),o.addEventListener("click",(function(){var e=$.getUserInfo();u.value=e.userName,s.value=e.userAbout,ee.deactivateButton(),ee.hideAllErrors(),Q.open()})),a.addEventListener("click",(function(){te.deactivateButton(),te.hideAllErrors(),W.open()})),ee.enableValidation(),te.enableValidation(),Q.setEventListeners(),W.setEventListeners(),K.renderAllItems(l.reverse().map((function(e){return{title:e.name,link:e.link,likes:e.likes,id:e._id,owner:e.owner._id}}))),i.addEventListener("click",(function(){ne.deactivateButton(),ne.hideAllErrors(),Y.open()})),ne.enableValidation(),X.setEventListeners(),Y.setEventListeners(),Z.setEventListeners()})).catch((function(e){return console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,